// En OperatingSystem.h
typedef struct {
	int busy;
	int initialPhysicalAddress;
	int processSize;
	int state;
	int priority;
	int copyOfPCRegister;
	unsigned int copyOfPSWRegister;
	int copyOfAccumulator;
	int programListIndex;
	int queueID;
	int whenToWakeUp;
	int arrivalTimeCPU; // Tic de llegada a la CPU
	int howManyBursts; // Contador de rafagas
} PCB;

// En OperatingSystem.c
void OperatingSystem_PCBInitialization(int PID, int initialPhysicalAddress, int processSize, int priority, int processPLIndex) {
	processTable[PID].busy=1;
	processTable[PID].initialPhysicalAddress=initialPhysicalAddress;
	processTable[PID].processSize=processSize;
	processTable[PID].state=NEW;
	processTable[PID].priority=priority;
	processTable[PID].programListIndex=processPLIndex;
	processTable[PID].copyOfAccumulator = 0;
	processTable[PID].howManyBursts = 0; // Inicializamos las rafagas
	// Daemons run in protected mode and MMU use real address
	if (programList[processPLIndex]->type == DAEMONPROGRAM) {
		processTable[PID].copyOfPCRegister=initialPhysicalAddress;
		processTable[PID].copyOfPSWRegister= ((unsigned int) 1) << EXECUTION_MODE_BIT;
		processTable[PID].queueID=DAEMONSQUEUE;
	} 
	else {
		processTable[PID].copyOfPCRegister=0;
		processTable[PID].copyOfPSWRegister=0;
		processTable[PID].queueID=USERPROCESSQUEUE;
	}
}

// En OperatingSystem.c
void OperatingSystem_Dispatch(int PID) {
	int previousState = processTable[PID].state;
	processTable[PID].arrivalTimeCPU = Clock_GetTime(); // Guardamos el valor del reloj a la hora de la llegada del proceso al procesador
	// The process identified by PID becomes the current executing process
	executingProcessID=PID;
	// Change the process' state
	processTable[PID].state=EXECUTING;
	OperatingSystem_ShowTime(SYSPROC);
	ComputerSystem_DebugMessage(110,SYSPROC,PID, programList[processTable[PID].programListIndex] -> executableName,statesNames[previousState],statesNames[EXECUTING]);
	// Modify hardware registers with appropriate values for the process identified by PID
	OperatingSystem_RestoreContext(PID);
}

// En OperatingSystem.c
void OperatingSystem_TerminateProcess() {
	int selectedProcess;
	if (Clock_GetTime() - processTable[executingProcessID].arrivalTimeCPU >= 5)
		processTable[executingProcessID].howManyBursts++; // Incrementador de rafagas
	processTable[executingProcessID].state = EXIT;
	OperatingSystem_ShowPartitionTable("before releasing memory");
	OperatingSystem_ReleaseMainMemory(executingProcessID);
	OperatingSystem_ShowPartitionTable("after releasing memory");

	if (programList[processTable[executingProcessID].programListIndex]->type==USERPROGRAM) 
		// One more user process that has terminated
		numberOfNotTerminatedUserProcesses--;
	
	// Simulation must finish 
	if (OperatingSystem_ShouldTheSystemDie())
		OperatingSystem_ReadyToShutdown();

	// Select the next process to execute (sipID if no more user processes)
	selectedProcess=OperatingSystem_ShortTermScheduler();

	// Assign the processor to that process
	OperatingSystem_Dispatch(selectedProcess);

	OperatingSystem_PrintStatus();
}

// En OperatingSystem.c
void OperatingSystem_TerminateProcess() {
	int selectedProcess;
	if (Clock_GetTime() - processTable[executingProcessID].arrivalTimeCPU >= 5)
		processTable[executingProcessID].howManyBursts++;
	processTable[executingProcessID].state = EXIT;

	// ImpresiÃ³n pedida por el ejercicio
	OperatingSystem_ShowTime(SYSPROC);
	ComputerSystem_DebugMessage(150, SYSPROC,executingProcessID, programList[processTable[executingProcessID].programListIndex] -> executableName, processTable[executingProcessID].howManyBursts);

	OperatingSystem_ShowPartitionTable("before releasing memory");
	OperatingSystem_ReleaseMainMemory(executingProcessID);
	OperatingSystem_ShowPartitionTable("after releasing memory");

	if (programList[processTable[executingProcessID].programListIndex]->type==USERPROGRAM) 
		// One more user process that has terminated
		numberOfNotTerminatedUserProcesses--;
	
	// Simulation must finish 
	if (OperatingSystem_ShouldTheSystemDie())
		OperatingSystem_ReadyToShutdown();

	// Select the next process to execute (sipID if no more user processes)
	selectedProcess=OperatingSystem_ShortTermScheduler();

	// Assign the processor to that process
	OperatingSystem_Dispatch(selectedProcess);

	OperatingSystem_PrintStatus();
}

// En messagesSTD.txt
150,Process [%d-%s] has executed [%d] CPU bursts\n